reactableOutput("table")
)
data <- read.csv(here("data", "studies.csv"))
server <- function(input, output) {
output$table <- renderReactable({
reactable(iris, filterable = TRUE, minRows = 10)
})
}
shinyApp(ui, server)
library(shiny)
library(reactable)
library(here)
ui <- fluidPage(
reactableOutput("table")
)
data <- read.csv(here("data", "studies.csv"))
server <- function(input, output) {
output$table <- renderReactable({
reactable(data, filterable = TRUE, minRows = 10)
})
}
shinyApp(ui, server)
View(data)
View(data)
data <- read.csv(here("data", "studies.csv")) %>%
janitor::clean_names()
library(shiny)
library(reactable)
library(here)
library(tidyverse)
data <- read.csv(here("data", "studies.csv")) %>%
janitor::clean_names()
View(data)
library(shiny)
library(reactable)
library(here)
library(tidyverse)
ui <- fluidPage(
reactableOutput("table")
)
data <- read.csv(here("data", "studies.csv")) %>%
janitor::clean_names() %>%
select(l2_status, typology, author_year, l3)
server <- function(input, output) {
output$table <- renderReactable({
reactable(data, filterable = TRUE, minRows = 10)
})
}
shinyApp(ui, server)
library(shiny)
library(reactable)
library(here)
library(tidyverse)
/* Get a fancy font from Google Fonts */
@import url('https://fonts.googleapis.com/css2?family=Yusei+Magic&display=swap');
body {
background-color: black;
color: white; /* text color */
}
/* Change header text to imported font */
h2 {
font-family: 'Yusei Magic', sans-serif;
}
/* Make text visible on inputs */
.shiny-input-container {
color: #474747;
}
ui <- fluidPage(
reactableOutput("table")
)
data <- read.csv(here("data", "studies.csv")) %>%
janitor::clean_names() %>%
select(l2_status, typology, author_year, l3)
server <- function(input, output) {
output$table <- renderReactable({
reactable(data, filterable = TRUE, minRows = 10)
})
}
shinyApp(ui, server)
/* Get a fancy font from Google Fonts */
@import url('https://fonts.googleapis.com/css2?family=Yusei+Magic&display=swap');
body {
background-color: black;
color: white; /* text color */
}
/* Change header text to imported font */
h2 {
font-family: 'Yusei Magic', sans-serif;
}
/* Make text visible on inputs */
.shiny-input-container {
color: #474747;
}
library(shiny)
ui <- fluidPage(
titlePanel("Old Faithful Geyser Data"),
sidebarLayout(
sidebarPanel(
sliderInput("bins", "Number of bins:", min = 1, max = 50, value = 30)
),
mainPanel(plotOutput("distPlot"))
)
)
server <- function(input, output) {
output$distPlot <- renderPlot({
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
shinyApp(ui = ui, server = server)
/* Get a fancy font from Google Fonts */
@import url('https://fonts.googleapis.com/css2?family=Yusei+Magic&display=swap');
body {
background-color: black;
color: white; /* text color */
}
/* Change header text to imported font */
h2 {
font-family: 'Yusei Magic', sans-serif;
}
/* Make text visible on inputs */
.shiny-input-container {
color: #474747;
}
library(shiny)
/* Get a fancy font from Google Fonts */
@import url('https://fonts.googleapis.com/css2?family=Yusei+Magic&display=swap');
body {
background-color: black;
color: white; /* text color */
}
/* Change header text to imported font */
h2 {
font-family: 'Yusei Magic', sans-serif;
}
/* Make text visible on inputs */
.shiny-input-container {
color: #474747;
}
ui <- fluidPage(
titlePanel("Old Faithful Geyser Data"),
sidebarLayout(
sidebarPanel(
sliderInput("bins", "Number of bins:", min = 1, max = 50, value = 30)
),
mainPanel(plotOutput("distPlot"))
)
)
server <- function(input, output) {
output$distPlot <- renderPlot({
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel("Old Faithful Geyser Data"),
sidebarLayout(
sidebarPanel(
sliderInput("bins", "Number of bins:", min = 1, max = 50, value = 30)
),
mainPanel(plotOutput("distPlot"))
)
)
server <- function(input, output) {
output$distPlot <- renderPlot({
/* Get a fancy font from Google Fonts */
@import url('https://fonts.googleapis.com/css2?family=Yusei+Magic&display=swap');
body {
background-color: black;
color: white; /* text color */
}
/* Change header text to imported font */
h2 {
font-family: 'Yusei Magic', sans-serif;
}
/* Make text visible on inputs */
.shiny-input-container {
color: #474747;
}
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(reactable)
library(here)
library(tidyverse)
ui <- fluidPage(
reactableOutput("table")
)
data <- read.csv(here("data", "studies.csv")) %>%
janitor::clean_names() %>%
select(l2_status, typology, author_year, l3)
server <- function(input, output) {
output$table <- renderReactable({
reactable(data, filterable = TRUE, minRows = 10)
})
}
shinyApp(ui, server)
runApp()
View(data)
data <- read.csv(here("data", "studies.csv")) %>%
janitor::clean_names()
data <- read.csv(here("data", "studies.csv")) %>%
janitor::clean_names() %>%
select(l2_status, typology, mirror_image_groups, author_year, l3)
library(shiny)
library(reactable)
library(here)
library(tidyverse)
ui <- fluidPage(
reactableOutput("table")
)
data <- read.csv(here("data", "studies.csv")) %>%
janitor::clean_names() %>%
select(l2_status, typology, mirror_image_groups, author_year, l3)
server <- function(input, output) {
output$table <- renderReactable({
reactable(data, filterable = TRUE, minRows = 10)
})
}
shinyApp(ui, server)
runApp()
runApp()
data <- read.csv(here("data", "studies.csv"))
data <- read.csv(here("data", "studies.csv")) %>%
janitor::clean_names()
View(data)
runApp()
data <- read.csv(here("data", "studies.csv")) %>%
janitor::clean_names() %>%
select(l1_influence, l2_influence, typological_influence, hybrid_influence,
mirror_image_groups, author_year, l3, other_languages)
library(shiny)
library(reactable)
library(here)
library(tidyverse)
ui <- fluidPage(
reactableOutput("table")
)
data <- read.csv(here("data", "studies.csv")) %>%
janitor::clean_names() %>%
select(l1_influence, l2_influence, typological_influence, hybrid_influence,
mirror_image_groups, author_year, l3, other_languages)
server <- function(input, output) {
output$table <- renderReactable({
reactable(data, filterable = TRUE, minRows = 10)
})
}
shinyApp(ui, server)
rsconnect::setAccountInfo(name='kparrish92', token='4D8950A1319AC8F2EFA1826AAECB44D9', secret='7kS6hVdacqm4zDKP/SgJMpMeWnI6NJH1QRYY8wBp')
runApp()
deployApp()
library(rsconnect)
deployApp()
data <- read.csv(here("data", "studies.csv")) %>%
janitor::clean_names()
library(shiny)
library(reactable)
library(here)
library(tidyverse)
data <- read.csv(here("data", "studies.csv")) %>%
janitor::clean_names()
View(data)
library(shiny)
library(reactable)
library(here)
library(tidyverse)
ui <- fluidPage(
reactableOutput("table")
)
data <- read.csv(here("data", "studies.csv")) %>%
janitor::clean_names() %>%
select(l1_influence, l2_influence, typological_influence, hybrid_influence,
mirror_image_groups, author_year, l3, other_languages, non_facilitative_transfer)
server <- function(input, output) {
output$table <- renderReactable({
reactable(data, filterable = TRUE, minRows = 10)
})
}
shinyApp(ui, server)
if (interactive()) {
library(shiny)
library(ECharts2Shiny)
dat <- c(rep("Type-A", 8),
rep("Type-B", 5),
rep("Type-C", 1))
# Server function -------------------------------------------
server <- function(input, output) {
renderPieChart(div_id = "test",
data = dat)
}
# UI layout -------------------------------------------------
ui <- fluidPage(
# We MUST load the ECharts javascript library in advance
loadEChartsLibrary(),
tags$div(id="test", style="width:50%;height:400px;"),
deliverChart(div_id = "test")
)
# Run the application --------------------------------------
shinyApp(ui = ui, server = server)
}
install.packages("ECharts2Shiny")
if (interactive()) {
library(shiny)
library(ECharts2Shiny)
dat <- c(rep("Type-A", 8),
rep("Type-B", 5),
rep("Type-C", 1))
# Server function -------------------------------------------
server <- function(input, output) {
renderPieChart(div_id = "test",
data = dat)
}
# UI layout -------------------------------------------------
ui <- fluidPage(
# We MUST load the ECharts javascript library in advance
loadEChartsLibrary(),
tags$div(id="test", style="width:50%;height:400px;"),
deliverChart(div_id = "test")
)
# Run the application --------------------------------------
shinyApp(ui = ui, server = server)
}
if (interactive()) {
library(shiny)
library(ECharts2Shiny)
data <- read.csv(here("data", "studies.csv")) %>%
janitor::clean_names() %>%
select(l1_influence, l2_influence, typological_influence, hybrid_influence,
mirror_image_groups, author_year, l3, other_languages, non_facilitative_transfer)
# Server function -------------------------------------------
server <- function(input, output) {
renderPieChart(div_id = "test",
data = dat)
}
# UI layout -------------------------------------------------
ui <- fluidPage(
# We MUST load the ECharts javascript library in advance
loadEChartsLibrary(),
tags$div(id="test", style="width:50%;height:400px;"),
deliverChart(div_id = "test")
)
# Run the application --------------------------------------
shinyApp(ui = ui, server = server)
}
if (interactive()) {
library(shiny)
library(ECharts2Shiny)
dat <- read.csv(here("data", "studies.csv")) %>%
janitor::clean_names() %>%
select(l1_influence, l2_influence, typological_influence, hybrid_influence,
mirror_image_groups, author_year, l3, other_languages, non_facilitative_transfer)
# Server function -------------------------------------------
server <- function(input, output) {
renderPieChart(div_id = "test",
data = dat)
}
# UI layout -------------------------------------------------
ui <- fluidPage(
# We MUST load the ECharts javascript library in advance
loadEChartsLibrary(),
tags$div(id="test", style="width:50%;height:400px;"),
deliverChart(div_id = "test")
)
# Run the application --------------------------------------
shinyApp(ui = ui, server = server)
}
data.frame(name = c("L1", "L2", "Typological"),
"value" = c(sum(data$l1_influence),
sum(data$l2_influence),
sum(data$typological_influence))
1 + 1
data.frame(name = c("L1", "L2", "Typological"),
"value" = c(sum(data$l1_influence),
sum(data$l2_influence),
sum(data$typological_influence)))
if (interactive()) {
library(shiny)
library(ECharts2Shiny)
data <- read.csv(here("data", "studies.csv")) %>%
janitor::clean_names() %>%
select(l1_influence, l2_influence, typological_influence, hybrid_influence,
mirror_image_groups, author_year, l3, other_languages, non_facilitative_transfer)
dat = data.frame(name = c("L1", "L2", "Typological"),
"value" = c(sum(data$l1_influence),
sum(data$l2_influence),
sum(data$typological_influence)))
# Server function -------------------------------------------
server <- function(input, output) {
renderPieChart(div_id = "test",
data = dat)
}
# UI layout -------------------------------------------------
ui <- fluidPage(
# We MUST load the ECharts javascript library in advance
loadEChartsLibrary(),
tags$div(id="test", style="width:50%;height:400px;"),
deliverChart(div_id = "test")
)
# Run the application --------------------------------------
shinyApp(ui = ui, server = server)
}
if (interactive()) {
library(shiny)
library(ECharts2Shiny)
library(tidyverse)
data <- read.csv(here("data", "studies.csv")) %>%
janitor::clean_names() %>%
select(l1_influence, l2_influence, typological_influence, hybrid_influence,
mirror_image_groups, author_year, l3, other_languages, non_facilitative_transfer)
dat = data.frame(name = c("L1", "L2", "Typological"),
"value" = c(sum(data$l1_influence),
sum(data$l2_influence),
sum(data$typological_influence)))
# Server function -------------------------------------------
server <- function(input, output) {
renderPieChart(div_id = "test",
data = dat)
}
# UI layout -------------------------------------------------
ui <- fluidPage(
# We MUST load the ECharts javascript library in advance
loadEChartsLibrary(),
tags$div(id="test", style="width:50%;height:400px;"),
deliverChart(div_id = "test")
)
# Run the application --------------------------------------
shinyApp(ui = ui, server = server)
}
if (interactive()) {
library(shiny)
library(ECharts2Shiny)
library(tidyverse)
library(here)
data <- read.csv(here("data", "studies.csv")) %>%
janitor::clean_names() %>%
select(l1_influence, l2_influence, typological_influence, hybrid_influence,
mirror_image_groups, author_year, l3, other_languages, non_facilitative_transfer)
dat = data.frame(name = c("L1", "L2", "Typological"),
"value" = c(sum(data$l1_influence),
sum(data$l2_influence),
sum(data$typological_influence)))
# Server function -------------------------------------------
server <- function(input, output) {
renderPieChart(div_id = "test",
data = dat)
}
# UI layout -------------------------------------------------
ui <- fluidPage(
# We MUST load the ECharts javascript library in advance
loadEChartsLibrary(),
tags$div(id="test", style="width:50%;height:400px;"),
deliverChart(div_id = "test")
)
# Run the application --------------------------------------
shinyApp(ui = ui, server = server)
}
library(plotly)
USPersonalExpenditure <- data.frame("Categorie"=rownames(USPersonalExpenditure), USPersonalExpenditure)
data <- USPersonalExpenditure[,c('Categorie', 'X1960')]
fig <- plot_ly(data, labels = ~Categorie, values = ~X1960, type = 'pie')
fig <- fig %>% layout(title = 'United States Personal Expenditures by Categories in 1960',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
fig
View(USPersonalExpenditure)
View(data)
data <- read.csv(here("data", "studies.csv")) %>%
janitor::clean_names() %>%
select(l1_influence, l2_influence, typological_influence, hybrid_influence,
mirror_image_
data <- read.csv(here("data", "studies.csv")) %>%
janitor::clean_names() %>%
select(l1_influence, l2_influence, typological_influence, hybrid_influence,
mirror_image_groups, author_year, l3, other_languages, non_facilitative_transfer)
dat = data.frame(name = c("L1", "L2", "Typological"),
"value" = c(sum(data$l1_influence),
sum(data$l2_influence),
sum(data$typological_influence)))
data <- read.csv(here("data", "studies.csv")) %>%
janitor::clean_names() %>%
select(l1_influence, l2_influence, typological_influence, hybrid_influence,
mirror_image_groups, author_year, l3, other_languages, non_facilitative_transfer)
dat = data.frame(name = c("L1", "L2", "Typological"),
"value" = c(sum(data$l1_influence),
sum(data$l2_influence),
sum(data$typological_influence)))
View(dat)
fig <- plot_ly(dat, labels = ~Category, values = ~X1960, type = 'pie')
fig <- fig %>% layout(title = 'United States Personal Expenditures by Categories in 1960',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
fig
labels = ~Category
View(dat)
fig <- plot_ly(dat, labels = ~name, values = ~value, type = 'pie')
fig <- fig %>% layout(title = 'United States Personal Expenditures by Categories in 1960',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
fig
fig <- plot_ly(dat, labels = ~name, values = ~value, type = 'pie')
fig <- fig %>% layout(title = 'Influence by Study',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
fig
